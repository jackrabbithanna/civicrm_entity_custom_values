<?php

/**
 * @file
 * CiviCRM Custom Values module.
 */

function civicrm_entity_custom_values_menu_alter(&$items) {
  foreach (entity_get_info() as $entity_name => $entity_info) {
    if (!empty($entity_info['module']) &&
        $entity_info['module'] == 'civicrm_entity_custom_values'
    ) {
      foreach ($entity_info['bundles'] as $file_type => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Get the base path and access.
          $path = $bundle_info['admin']['path'];
          $items[$path] = $items[$path . '/fields'];
          $items[$path]['type'] = MENU_NORMAL_ITEM;
          $items[$path]['title'] = $entity_info['label'];
          $items[$path]['description'] = t('CiviCRM @entity entity', array('@entity' => $entity_name));
          $items[$path . '/fields']['type'] = MENU_DEFAULT_LOCAL_TASK;
          $items[$path]['access callback'] = 'civicrm_entity_custom_values_access';
          $items[$path . '/fields']['access callback'] = 'civicrm_entity_custom_values_access';
          $items[$path]['access arguments'] = array('admin');
          $items[$path . '/fields']['access arguments'] = array('admin');
        }
      }
    }
  }
}

function civicrm_entity_custom_values_menu(){
  $items = array();
  $items['admin/structure/types/manage/civicrm_custom_value'] = array(
      'title' => 'CiviCRM CustomValue',
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'civicrm_entity_custom_values_access',
      'access arguments' => array('admin'),
      'page callback' => 'civicrm_entity_custom_values_bundle_list',
  );
  $items['admin/structure/types/manage/civicrm_custom_value/list'] = array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
  );
  return $items;
}

function civicrm_entity_custom_values_form_alter(&$form, &$form_state, $form_id){


}

/**
 * Implements hook_entity_info().
 */
function civicrm_entity_custom_values_entity_info() {
  $items['civicrm_custom_value'] = array(
    'label' => t('Custom Value'),
    'plural label' => t('Custom Values'),
    'description' => t('CiviCRM Custom Value entities, represents all custom groups and fields for an CiviCRM Entity.'),
    'entity class' => 'CiviCRMCustomValueEntity',
    'controller class' => 'CiviCRMCustomValueEntityController',
    'extra fields controller class' => 'EntityDefaultExtraFieldsController',
    'fieldable' => TRUE,
    'entity keys' => array(
     // 'name' => 'entity_table',
      'id' => 'id',
      'bundle' => 'type'
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'admin ui' => array(
      'path' => 'admin/structure/types/manage/civicrm_custom_value',
      'file' => 'civicrm_entity_custom_values.entity.inc',
      'controller class' => 'CivicrmEntityCustomValueUIController',
    ),
    'access callback' => 'civicrm_entity_custom_values_access',
    'module' => 'civicrm_entity_custom_values',
    'wrapper class' => 'CiviCRMCustomValueWrapper',
  );

  return $items;
}

function civicrm_entity_custom_values_entity_info_alter(&$entity_info) {
  $entities = _civicrm_entity_enabled_entities();
  foreach ($entities as $drupal_entity => $civicrm_entity) {
    if(_civicrm_entity_custom_values_entity_supports_custom_fields($civicrm_entity)){
      $entity_info['civicrm_custom_value']['bundles'][$civicrm_entity]['label'] = t('CiviCRM @entity custom fields', array('@entity' => ucwords($civicrm_entity)));
      $entity_info['civicrm_custom_value']['bundles'][$civicrm_entity]['admin'] = array(
        'path' => 'admin/structure/types/manage/civicrm_custom_value/' . $civicrm_entity,
        'access arguments' => array('admin'),
        'access callback' => 'civicrm_entity_custom_values_access',
      );
    }

  }
}

/**
 * Implements hook_entity_property_info().
 */
function civicrm_entity_custom_values_entity_property_info() {

  $info['civicrm_custom_value']['properties'] = array(
    'id' => array(
      'label' => 'id',
      'type' => 'integer',
    ),
    'entity_table' => array(
      'label' => t('Entity Table'),
      'type' => 'text',
    ),
    'entity_id' => array(
      'label' => t('Entity ID'),
      'type' => 'integer',
    ),
    'type' => array(
      'label' => t('Type'),
      'type' => 'text',
    ),
    'groups' => array(
      'label' => t('Groups'),
      'type' => 'struct',
      'property info' => array(
        'custom_group_id' => array(
          'label' => t('Custom Group ID'),
          'type' => 'integer',
        ),
        'name' => array(
          'label' => t('Name'),
          'type' => 'text',
        ),
        'title' => array(
          'label' => t('Title'),
          'type' => 'text',
        ),
        'fields' => array(
          'label' => t('Fields'),
          'type' => 'struct',
          'property info' => array(
            'entity_id' => array(
              'label' => t('Entity ID'),
              'type' => 'integer',
            ),
            'latest' => array(
              'label' => t('Latest'),
              'type' => 'text',
            ),
            'id' => array(
              'label' => t('ID'),
              'type' => 'integer',
            ),
            'values' => array(
              'label' => t('Values'),
            ),
          ),
        ),
      ),
    ),
  );

  if(civicrm_initialize(TRUE)) {
    $supported_types = _civicrm_entity_custom_values_get_supported_entities();

    foreach($supported_types as $civicrm_entity => $entity_table) {

      $civicrm_metadata = civicrm_api3($civicrm_entity, 'getfields');
      $properties = array();

      $fields = $civicrm_metadata['values'];
     // dsm($fields);
      foreach ($fields as $key => $value) {
        if (substr($key, 0, 6) === 'custom') {
          $field_info = civicrm_entity_custom_values_get_field_info('civicrm_' . $civicrm_entity, $key, $value);
          unset($field_info[$key]['schema field']);
          $properties[$key] = $field_info[$key];
        }
      }
      $info['civicrm_custom_value']['properties'] += $properties;
    }
  }

  return $info;
}

function civicrm_entity_custom_values_access($op){
  //dsm($op);
  return TRUE;
}

function civicrm_entity_custom_values_entity_query_alter($query){
 // dsm($query);
}

function civicrm_entity_custom_values_field_extra_fields_alter(&$info) {
  $supported_types = _civicrm_entity_custom_values_get_supported_entities();

  foreach($supported_types as $civicrm_entity => $entity_table) {

    $civicrm_metadata = civicrm_api3($civicrm_entity, 'getfields');
    $info['civicrm_custom_value'][$civicrm_entity]['display']['entity_table'] = $info['civicrm_custom_value']['civicrm_custom_value']['display']['entity_table'];
    $info['civicrm_custom_value'][$civicrm_entity]['display']['entity_id'] = $info['civicrm_custom_value']['civicrm_custom_value']['display']['entity_id'];
    $info['civicrm_custom_value'][$civicrm_entity]['display']['groups'] = $info['civicrm_custom_value']['civicrm_custom_value']['display']['groups'];
    $fields = $civicrm_metadata['values'];

    foreach ($fields as $key => $value) {
      if (substr($key, 0, 6) === 'custom') {
        $info['civicrm_custom_value'][$civicrm_entity]['display'][$key] =  $info['civicrm_custom_value']['civicrm_custom_value']['display'][$key];

      }
    }
    $info['civicrm_custom_value'][$civicrm_entity]['form'] =  $info['civicrm_custom_value'][$civicrm_entity]['display'];
  }
//dsm($info);
}

/**
 * Implements hook_views_api().
 */
function civicrm_entity_custom_values_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'civicrm_entity_custom_values'),
  );
}

function civicrm_entity_custom_values_get_field_info($civicrm_entity, $fieldname, $field_specs, $context = ''){
  // Type is empty for custom fields - we should sort that out but
  // skipping for now we are only doing 'integers' at this stage.
  $types = array(
      1 => 'integer',
      2 => 'text',
      32 => 'text',
      16 => 'integer',
      4 => 'datetime',
      8 => 'datetime',
      12 => 'datetime',
      256 => 'datetime',
      512 => 'decimal',
      1024 => 'decimal',
  );
  if (!empty($field_specs['type']) &&
      array_key_exists($field_specs['type'], $types)
  ) {
    //determine the label of the field
    $label = _civicrm_entity_get_title($field_specs);
    $info[$fieldname] = array(
        'label' => $label,
        'type' => $types[$field_specs['type']],
        'sanitize' => 'check_plain',
        'setter callback' => 'entity_property_verbatim_set',
    );
    if (!empty($field_specs['api.required'])) {
      $info[$fieldname]['required'] = TRUE;
    }
    if ($field_specs['type'] == 16) {
      $info[$fieldname]['size'] = 'tiny';
    }
    if ($types[$field_specs['type']] == 'datetime') {
      unset($info[$fieldname]['type']);
      $info[$fieldname]['mysql_type'] = 'datetime';
      $info[$fieldname]['tz_handling'] = 'site';
      $info[$fieldname]['offset_field'] = '';
      $info[$fieldname]['related_fields'] = array();
      switch ($field_specs['type']) {
        case 4:
          $info[$fieldname]['granularity'] = array('year', 'month', 'day');
          break;
        case 8:
          $info[$fieldname]['granularity'] = array(
              'hour',
              'minute',
              'second'
          );
        case 12:
          $info[$fieldname]['granularity'] = array(
              'year',
              'month',
              'day',
              'hour',
              'minute',
              'second'
          );
      }
    }
    // This is a semi-reliable way of distinguishing 'real' fields
    // from pseudo fields and custom fields and impacts on views
    if (!empty($field_specs['name'])) {
      $info[$fieldname]['schema field'] = $field_specs['name'];
    }

    //widget code
    $info[$fieldname]['widget'] = civicrm_entity_get_field_widget($field_specs,$civicrm_entity);

    // We will add contact as a related entity for FK references to
    // contact. This could be expanded to all FKs e.g event_id in
    // Participant. Could load the event at the moment we are being
    // cautious.
    if (CRM_Utils_Array::value('FKClassName', $field_specs)) {
      $fks = _civicrm_entity_chained_fks();
      if (array_key_exists($field_specs['FKClassName'], $fks)) {
        $fks_entity = $fks[$field_specs['FKClassName']];
        $info[$fieldname . '_' . $fks_entity] = array(
            'label' => _civicrm_entity_get_title($field_specs),
            'type' => 'civicrm_' . $fks_entity,
            'property_info' => array(
                'field' => $fieldname,
                'entity' => $fks_entity,
            ),
            'getter callback' => 'civicrm_entity_metadata_civicrm_entity_get_properties',
        );
      }
    }
    // @TODO We are treating contact as the only possible entity
    // which is not great - need to figure out better approach - can
    // we have more than one? Define 'civicrm_entity'?
    if ($fieldname == 'entity_id') {
      $fks_entity = 'contact';
      $info[$fieldname . '_' . $fks_entity] = array(
          'label' => _civicrm_entity_get_title($field_specs),
          'type' => 'civicrm_' . $fks_entity,
          'property_info' => array(
              'field' => $fieldname,
              'entity' => $fks_entity,
          ),
          'getter callback' => 'civicrm_entity_metadata_civicrm_entity_get_properties',
      );
    }

    if (!empty($field_specs['options'])) {
      // $info[$fieldname]['type'] = 'list<integer>';
      $info[$fieldname]['options list'] = '_civicrm_entity_rules_attach_options';
      $info[$fieldname]['options data'] = $field_specs['options'];
      if ($context == 'property_info') {
        $info[$fieldname]['property defaults']['options list'] = $field_specs['options'];
      }
    }
  return $info;
  }

}

function _civicrm_entity_custom_values_entity_supports_custom_fields($entity_type){
  $supported_entities = _civicrm_entity_custom_values_get_supported_entities();
  if(in_array($entity_type, $supported_entities)){
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function _civicrm_entity_custom_values_get_supported_entities(){
  return array(
    'contact' => 'contact',
    'activity' => 'activity',
    'participant' => 'participant',
  );
}

function civicrm_entity_custom_values_bundle_list(){
// Call your hook_entity_info implementation, 'cause it includes all your bundles.
  $entity_info = entity_get_info('civicrm_custom_value');
  $headers = array(t('Name'), t('Actions')); // Table Headers
  $rows = array();
  foreach ($entity_info['bundles'] as $civicrm_entity => $bundle) {
    // Get the bundle edit link, add it to a table row.
    $links = array();
    $links[] = array('title' => t('Manage Fields'), 'href' => 'admin/structure/types/manage/civicrm_custom_value/' . $civicrm_entity);
    $links[] = array('title' => t('Manage Display'), 'href' => 'admin/structure/types/manage/civicrm_custom_value/' . $civicrm_entity . '/display');
    $link_list = theme('links', array(
        'links' => $links,
        'attributes' => array('class' => array('links', 'inline')),
    ));
    $rows[] = array($bundle['label'], $link_list);
  }
  // Format the table array. This is a pretty simple table, you could include
  // links to the field management pages for each bundle too.
  $output = array(
      '#theme' => 'table',
      '#header' => $headers,
      '#rows' => $rows,
  );
  return $output;
}